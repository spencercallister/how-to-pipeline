[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Why do I write?\nMy father (a very wise man) always told me people need at least two of three abilities: 1. Writing 2. Reading 3. Problem solving\nAs much as I love reading, I only like reading on subjects I really love, like history and political science. I’ve always had an ability to communicate better through writing than speaking because it forces me to take my time to think about what I really want to say. The world is in desparate need of highly technical people who can communicate to the ground level, the every day users of technology who’s understanding is not forged in the flames of hours on Stack Overflow and Reddit, but through what can be quickly inferred.\nIf I can increase the technical skill level for even one person who views this blog by a single new ability, then my effort has far paid off. Even if no one reads this blog, the skills I refine by effectively describing them in a way a high schooler can understand makes my personal growth the reward.\nMore than this, engineering is not my greatest passion. My greatest passion is changing the world through discourse on the issues that it faces. This I believe, that my voice will change the world if I listen and speak."
  },
  {
    "objectID": "posts/secrets_management/index.html",
    "href": "posts/secrets_management/index.html",
    "title": "Use a Secret Manager!",
    "section": "",
    "text": "What are Secrets?\nSecrets usually refer to credentials that you do not want to expose outside of yourself or your organization.\nSome examples of secrets are:\n\nAPI keys\nDatabase credentials\nEncryption keys\nThird party tokens\nWebsite passwords\n\nWhen these are not stored properly, they can be leaked in data breaches that are caused intentionally or unintentionally. This gives people with bad intentions the means to exploit your data or even worse, millions of people’s data.\nLast week, CPO Magazine reported that a hacker obtained source code from a repository belonging to a third party company developing internal tools for Nokia. Included in the leak are SSH keys and hardcoded credentials, which the hacker is auctioning off.\nThe third party should have avoided hard coding the credentials and the SSH key never should have been pushed to the repository. To help you avoid making the same mistake, I will walk you through using using two secret managers.\n\n\nUsing a Secret Manager\nIn your project directory, create a file called “secret.json” and paste the data below into it:\n{\n    \"Host\": \"sample_host\",\n    \"Port\": 5432,\n    \"Database\": \"sample_database\",\n    \"Username\": \"sample_user\",\n    \"Password\": \"sample_password\"\n}\nNow create a new python file where the code using the SDK will go.\n\nGoogle Cloud\nSince I am a big fan of Google Cloud, I will show you how to use the Google Cloud Secret Manager.\nIf you do not already have a project you can use, you need to create one before moving on. You will also need to enable billing and enable the secret manager API.\nNext you will need to authenticate somehow. I strongly recommend using the gcloud CLI because of how easy it is to use in application development. If you haven’t done so already, install the gcloud CLI.\nInitialize the CLI with:\ngcloud init\nAuthenticate using:\ngcloud auth application-default login\nNow that you are authenticated, you can create the secret.\nInstall the Secret Manager library:\npip install google-cloud-secret-manager\nImport the module and initialize the Secret Manager Service Client:\nfrom google.cloud import secretmanager     # Import the Secret Manager client library.\nimport json\n\nclient = secretmanager.SecretManagerServiceClient()     # Create the Secret Manager client.\nCreate the Secret:\nproject_id = \"your-project-id\"     # GCP project in which to store secrets in Secret Manager.\nsecret_id = \"tutorial-sample\"     # ID of the secret to create.\n\nparent = f\"projects/{project_id}\"     # Build the parent name from the project.\n\n# Create the parent secret.\nsecret = client.create_secret(\n    request={\n        \"parent\": parent,\n        \"secret_id\": secret_id,\n        \"secret\": {\"replication\": {\"automatic\": {}}},\n    }\n)\n\n# Add the secret version.\nversion = client.add_secret_version(\n    request={\n        \"parent\": secret.name, \n        \"payload\": {\"data\": open(\"replace_with_path/secret.json\").read().encode(\"UTF-8\")},     # Convert the json to string and encode\n    }\n)\n\nprint(f\"Created secret version: {version.name}\")\nNow if you want to access the secret you just created in an application, you can use:\nsecret_path = f\"projects/{project_id}/secrets/{secret_id}/versions/1\"\n\nresponse = client.access_secret_version(request={\"name\": secret_path})     # Access the secret version.\ntutorial_secret = json.loads(response.payload.data.decode(\"utf-8\"))     # Decode and convert from string to Dict\nFor further questions on Google Cloud’s secret manager, review their documentation.\n\n\nInfisical\nCreate an Infisical account\nWhen you are signed up and logged in, click on the green “Add New Project” button on the top right.\nEnter your project name and you can leave the rest empty, then click the green “Create Project” button.\nNow select “Access Control” from the left nav-bar and click on the “Machine Identities” tab.\nClick the green “Add Identity” button, then the “Create a new identity” button, and then click “Machine Identities” again.\nEnter a name and select “Admin” for the role.\nClick the green “Create” button.\nThen click the green “Create Client Secret” button.\nEnter a name and if wanted, set the max number of uses (0 is infinite).\nCopy the secret and stash it somewhere safe for now.\nAdd the indentity to the project.\nNow you are ready to use the credentials to authenticate and create a secret in Python.\nOpen a new terminal and set your environment variables. The Client ID can be found in the Authentication section of the identity and get the secret from where you stashed it and remove it from there.\nOn Linux:\nexport CLIENT_ID=your_client_id\nexport CLIENT_SECRET=your_client_secret\nOn Windows:\nset CLIENT_ID=your_client_id\nset CLIENT_SECRET=your_client_secret\nSince the environment variables are set in this specific terminal, you will always run the python script using:\npython your_file_name.py\nInstall the Infisical SDK for Python:\npip install infisicalsdk\nImport the module and initialize the client:\nimport json\nimport os\nfrom infisical_sdk import InfisicalSDKClient\n\nclient = InfisicalSDKClient(host=\"https://app.infisical.com\")     # Initialize the client\nclient.auth.universal_auth.login(client_id = os.environ.get(\"CLIENT_ID\"), client_secret = os.environ.get(\"CLIENT_SECRET\"))\nCreate the secret:\n# Use the SDK to interact with Infisical.\nnew_secret = client.secrets.create_secret_by_name(\n    secret_name = \"tutorial-sample\",\n    project_id = your_project_id,\n    secret_path = \"/\",\n    environment_slug = \"dev\",\n    secret_value = open(\"replace_with_path/secret.json\").read(),\n    secret_comment = \"Optional comment\",\n    skip_multiline_encoding = False,\n    secret_reminder_repeat_days = 30,     # Optional\n    secret_reminder_note = \"Remember to update this secret\"     # Optional\n)\nNow if you want to access the secret you just created in an application, you can use:\n# Get the secret\nsecret = client.secrets.get_secret_by_name(\n    secret_name = \"tutorial-sample\",\n    project_id = your_project_id,\n    environment_slug = \"dev\",\n    secret_path = \"/\",\n    expand_secret_references = True,\n    include_imports = True,\n    version = None  # Optional\n)\n\nsecret_value = json.loads(secret.secret.secret_value)     # Convert from string to json\nFor further questions on Infisical’s SDK, read their documentation.\n\n\n\nWrapping Up\nWith the secret now safely stored in Google Cloud or Infisical, you should delete the secret.json file I had you make earlier so they don’t get exposed from your directory by accident.\nWith your new knowledge unlocked, not only do you now have a single space to keep all your credentials for APIs, databases, etc. but you can access them from your programs. This is excellent cyber security in action and keeps your sensitive data secure. There are a lot of secret managers out there with their own unique features and advantages, so don’t be afraid to explore new products.\nThank you for reading my article and good luck in all your programming ventures!"
  },
  {
    "objectID": "posts/spatial_joins/index.html",
    "href": "posts/spatial_joins/index.html",
    "title": "Geospatial Joins in Apache Sedona",
    "section": "",
    "text": "Pyspark combined with Apache Sedona is a very powerful tool that not enough data scientists and data engineers are using, especially when it comes to spatial data. This walkthrough will tell you the necessities for getting started in using spatial joins with Apache Sedona in Databricks.\nFirst, sign up for a Community Edition Databricks account When you are logged in create a new notebook and start a cluster with a 12.2 LTS (Scala 2.12, Spark 3.3.2) runtime, then attach it to the notebook.\nClick on “Compute” on the left nav-bar and click on your cluster. Click on the “Libraries” tab and click “Install new”.\nSelect Maven and enter the following in the coordinates section:\norg.apache.sedona:sedona-spark-shaded-3.0_2.12:1.6.0\nClick “Install”.\nClick the install new button again and select “Maven”.\nEnter the following into the coordinates section:\norg.datasyslab:geotools-wrapper:1.6.0-28.2\nGo back to your notebook and you will use the following line to install the Apache Sedona library for Python:\n%pip install apache-sedona\nThen import the library and initialize the Sedona context:\nfrom pyspark.sql.types import StructType, StructField, FloatType, TimestampType, ShortType, DoubleType, DateType, StringType, LongType\nfrom pyspark.sql import functions as F\nfrom sedona.spark import *\n\nconfig = SedonaContext.builder() .\\\n    config('spark.jars.packages',\n           'org.apache.sedona:sedona-spark-shaded-3.0_2.12:1.6.0,'\n           'org.datasyslab:geotools-wrapper:1.6.0-28.2'). \\\n    getOrCreate()\n\nsedona = SedonaContext.create(config)\nNow you’ll make two sets of data from the example below. The first uses points and has columns id, latitude, and longitude. The second has polygons with columns id and WKT.\npoints_data = [\n    (1, 34.05, -118.25),  # Los Angeles\n    (2, 36.16, -115.15),  # Las Vegas\n    (3, 40.71, -74.00),   # New York\n    (4, 37.77, -122.41)   # San Francisco\n]\n\n\npolygons_data = [\n    (1, \"POLYGON((-125 30, -125 40, -115 40, -115 30, -125 30))\"),  # Covers part of California/Nevada\n    (2, \"POLYGON((-80 35, -80 45, -70 45, -70 35, -80 35))\")        # Covers part of New York area\n]\nDefine the schemas for the points data and polygons.\npoints_schema = StructType([\n    StructField(\"id\", StringType(), True),\n    StructField(\"latitude\", DoubleType(), True),\n    StructField(\"longitude\", DoubleType(), True)\n])\n\npolygons_schema = StructType([\n    StructField(\"id\", StringType(), True),\n    StructField(\"wkt\", StringType(), True)\n])\nNext, create DataFrames from the sample data.\npoints_df = spark.createDataFrame(points_data, schema=points_schema)\npolygons_df = spark.createDataFrame(polygons_data, schema=polygons_schema)\nConvert points from the first data frame to Geometry objects.\npoints_df = points_df.withColumn(\"geometry\", F.expr(\"ST_Point(CAST(longitude AS Decimal(24, 20)), CAST(latitude AS Decimal(24, 20)))\"))\nConvert the polygons from the second data frame to Geometry objects.\npolygons_df = polygons_df.withColumn(\"geometry\", F.expr(\"ST_GeomFromWKT(wkt)\"))\nNow we are going to switch from using Pyspark to using SparkSQL to take advantage of SQL’s simple join operation.\nStart by registering the DataFrames as temporary views for SQL operations.\npoints_df.createOrReplaceTempView(\"points\")\npolygons_df.createOrReplaceTempView(\"polygons\")\nPerform geospatial join using ST_Intersects, which joins the rows between data frames based on if their geometries share any area at all.\nresult_df = spark.sql(\"\"\"\n    SELECT p.id AS point_id, g.id AS polygon_id\n    FROM points p, polygons g\n    WHERE ST_Intersects(p.geometry, g.geometry)\n\"\"\")\nST_Intersects is just one of many useful Apache Sedona spatial functions.\nThanks for reading this brief guide on getting started with spatial joins in Apache Sedona and Databricks."
  },
  {
    "objectID": "posts/places_tutorial/index.html",
    "href": "posts/places_tutorial/index.html",
    "title": "Oh, the Places You’ll Go! - The Places API",
    "section": "",
    "text": "I’ve mentioned in some of my other posts that I am a big fan of Google Cloud. The APIs are amazing because they are expansive, easy to use, and fairly cost efficient. One of my favorite APIs is the Places API, which gives you access to pretty much everything in Google Maps, including addresses, business details, and reviews. This provides for a really neat data source that you can use to collect a ton of data for your ETL projects.\nFollow along to learn how to get a quickstart on using the Places API.\nBefore you dive in, make sure you have done the following first: 1. Create a project 2. Enable billing 3. enable the Places API\nOnce those steps are completed you can proceed to make a new directory and Python file for your program.\nOne great use of the Places API is creating recommendation engines. For this tutorial, let’s pretend we are writing an application that recommends restaurants based on a user’s preferences on the type of food, where they live, price range, etc.\nWe’ll keep this pretty simple by just focusing on getting some of the data that would be helpful for our awesome new app.\nTo start, import the requests library from Python so you can make the request to the Places endpoint.\nimport requests\nTo access the API, you will need to authenticate by using an API key. To get your API key for the Place API, type “Google Maps Platform” in the Cloud Console search bar and click on the first option.\nHover over the left nav-bar and click on APIs & Services. Then scroll until you find “Places API (New)”, make sure it says “New”, and click on “Keys”.\nSelect “Show Key” on the Maps Platform API Key and copy the key.\nI highly recommend storing your API key in a secret manager like Google Cloud’s rather than hard coding it into your program. To learn how to do this, read my previous blog post titled “Use a Secrets Manager!.”\nWhen you have the secret ready to go, you can proceed to making the API call.\nIn my example, I am going to search for Sushi restaurants in Portland, Oregon.\n\nkey = secret[\"key\"]\n\nurl = \"https://places.googleapis.com/v1/places:searchText\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"X-Goog-Api-Key\": key,\n    \"X-Goog-FieldMask\": \"places.id,places.displayName,places.businessStatus,places.formattedAddress,places.currentOpeningHours,places.currentSecondaryOpeningHours,places.internationalPhoneNumber,places.nationalPhoneNumber,places.priceLevel,places.priceRange,places.rating,places.regularOpeningHours,places.regularSecondaryOpeningHours,places.userRatingCount,places.websiteUri\"\n}\ndata = {\n    \"textQuery\": \"Popular Sushi in Portland\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\n\n# Print the response\nprint(response.status_code)\n\nresponse_data = response.json()\nplaces = response_data[\"places\"]\nprint(places)\n\nThe places variable should look something like the following when printed out:\n[{'id': 'ChIJ3X-i8i8LlVQRTW4oCJHmg2M', 'nationalPhoneNumber': '(503) 380-7226'...}...]\nLooking at really large objects isn’t ideal, so let’s put the data into a format that is more readable like a data frame.\nSince Polars is the future we will be using that.\nimport polars as pl\nNow we can simply plug the places object into the pl.DataFrame method and display the data.\nplaces_df = pl.DataFrame(places)\nplaces_df.limit(5)\nNow that we have a lot of the details on the restaurants, we can sort through them based on what the user would like and recommend it back to them.\nSince the query is interested in a really popular Sushi place in Portland, I will look for the place with the most reviews.\nrec = places_df\\\n    .sort(\"userRatingCount\", \"rating\", descending=[True, True])\\\n    .limit(1)\\\n    .to_dicts()[0]\n\nprint(f\"Based on your preferences, we highly recommend going to {rec['displayName']['text']}, which has an average rating of {rec['rating']} from {rec['userRatingCount']} reviews.\")\nLet’s say the user then wanted to get more details on the restaurant, like whether it has curbside pickup, live music, or alcoholic beverages, you could pass in the ID of the restaurant the user is curious about and get those details for them.\nurl = f\"https://places.googleapis.com/v1/places/{places[0][\"id\"]}\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"X-Goog-Api-Key\": key,\n    \"X-Goog-FieldMask\": \"allowsDogs,curbsidePickup,delivery,dineIn,editorialSummary,evChargeOptions,fuelOptions,goodForChildren,goodForGroups,goodForWatchingSports,liveMusic,menuForChildren,parkingOptions,paymentOptions,outdoorSeating,reservable,restroom,reviews,*servesBeer,servesBreakfast,servesBrunch,servesCocktails,servesCoffee,servesDessert,servesDinner,servesLunch,servesVegetarianFood,servesWine,takeout\"\n}\nresponse = requests.get(url, headers=headers)\n\n# Print the response\nprint(response.status_code)\n\nresponse_data = response.json()\n\nThe places API is full of potential for really great applications, and it is just one of many great APIs that Google has to offer. Thanks for following along and I hope you enjoyed learning about this really awesome tool."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "how-to-pipeline",
    "section": "",
    "text": "Geospatial Joins in Apache Sedona\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 6, 2024\n\n\nSpencer Callister\n\n\n\n\n\n\n\n\n\n\n\n\nOh, the Places You’ll Go! - The Places API\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nDec 1, 2024\n\n\nSpencer Callister\n\n\n\n\n\n\n\n\n\n\n\n\nUse a Secret Manager!\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nNov 20, 2024\n\n\nSpencer Callister\n\n\n\n\n\n\nNo matching items"
  }
]