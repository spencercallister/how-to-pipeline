[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/secrets_management/index.html",
    "href": "posts/secrets_management/index.html",
    "title": "Use a Secret Manager!",
    "section": "",
    "text": "What are Secrets?\nSecrets usually refer to credentials that you do not want to expose outside of yourself or your organization.\nSome examples of secrets are:\n\nAPI keys\nDatabase credentials\nEncryption keys\nThird party tokens\nWebsite passwords\n\nWhen these are not stored properly, they can be leaked in data breaches that are caused intentionally or unintentionally. This gives people with bad intentions the means to exploit your data or even worse, millions of people’s data.\nLast week, CPO Magazine reported that a hacker obtained source code from a repository belonging to a third party company developing internal tools for Nokia. Included in the leak are SSH keys and hardcoded credentials, which the hacker is auctioning off.\nThe third party should have avoided hard coding the credentials and the SSH key never should have been pushed to the repository. To help you avoid making the same mistake, I will walk you through using using two secret managers.\n\n\nUsing a Secret Manager\nIn your project directory, create a file called “secret.json” and paste the data below into it:\n{\n    \"Host\": \"sample_host\",\n    \"Port\": 5432,\n    \"Database\": \"sample_database\",\n    \"Username\": \"sample_user\",\n    \"Password\": \"sample_password\"\n}\nNow create a new python file where the code using the SDK will go.\n\nGoogle Cloud\nSince I am a big fan of Google Cloud, I will show you how to use the Google Cloud Secret Manager.\nIf you do not already have a project you can use, you need to create one before moving on. You will also need to enable billing and enable the secret manager API.\nNext you will need to authenticate somehow. I strongly recommend using the gcloud CLI because of how easy it is to use in application development. If you haven’t done so already, install the gcloud CLI.\nInitialize the CLI with:\ngcloud init\nAuthenticate using:\ngcloud auth application-default login\nNow that you are authenticated, you can create the secret.\nInstall the Secret Manager library:\npip install google-cloud-secret-manager\nImport the module and initialize the Secret Manager Service Client:\nfrom google.cloud import secretmanager     # Import the Secret Manager client library.\nimport json\n\nclient = secretmanager.SecretManagerServiceClient()     # Create the Secret Manager client.\nCreate the Secret:\nproject_id = \"your-project-id\"     # GCP project in which to store secrets in Secret Manager.\nsecret_id = \"tutorial-sample\"     # ID of the secret to create.\n\nparent = f\"projects/{project_id}\"     # Build the parent name from the project.\n\n# Create the parent secret.\nsecret = client.create_secret(\n    request={\n        \"parent\": parent,\n        \"secret_id\": secret_id,\n        \"secret\": {\"replication\": {\"automatic\": {}}},\n    }\n)\n\n# Add the secret version.\nversion = client.add_secret_version(\n    request={\n        \"parent\": secret.name, \n        \"payload\": {\"data\": open(\"replace_with_path/secret.json\").read().encode(\"UTF-8\")},     # Convert the json to string and encode\n    }\n)\n\nprint(f\"Created secret version: {version.name}\")\nNow if you want to access the secret you just created in an application, you can use:\nsecret_path = f\"projects/{project_id}/secrets/{secret_id}/versions/1\"\n\nresponse = client.access_secret_version(request={\"name\": secret_path})     # Access the secret version.\ntutorial_secret = json.loads(response.payload.data.decode(\"utf-8\"))     # Decode and convert from string to Dict\nFor further questions on Google Cloud’s secret manager, review their documentation.\n\n\nInfisical\nCreate an Infisical account\nWhen you are signed up and logged in, click on the green “Add New Project” button on the top right.\nEnter your project name and you can leave the rest empty, then click the green “Create Project” button.\nNow select “Access Control” from the left nav-bar and click on the “Machine Identities” tab.\nClick the green “Add Identity” button, then the “Create a new identity” button, and then click “Machine Identities” again.\nEnter a name and select “Admin” for the role.\nClick the green “Create” button.\nThen click the green “Create Client Secret” button.\nEnter a name and if wanted, set the max number of uses (0 is infinite).\nCopy the secret and stash it somewhere safe for now.\nAdd the indentity to the project.\nNow you are ready to use the credentials to authenticate and create a secret in Python.\nOpen a new terminal and set your environment variables. The Client ID can be found in the Authentication section of the identity and get the secret from where you stashed it and remove it from there.\nOn Linux:\nexport CLIENT_ID=your_client_id\nexport CLIENT_SECRET=your_client_secret\nOn Windows:\nset CLIENT_ID=your_client_id\nset CLIENT_SECRET=your_client_secret\nSince the environment variables are set in this specific terminal, you will always run the python script using:\npython your_file_name.py\nInstall the Infisical SDK for Python:\npip install infisicalsdk\nImport the module and initialize the client:\nimport json\nimport os\nfrom infisical_sdk import InfisicalSDKClient\n\nclient = InfisicalSDKClient(host=\"https://app.infisical.com\")     # Initialize the client\nclient.auth.universal_auth.login(client_id = os.environ.get(\"CLIENT_ID\"), client_secret = os.environ.get(\"CLIENT_SECRET\"))\nCreate the secret:\n# Use the SDK to interact with Infisical.\nnew_secret = client.secrets.create_secret_by_name(\n    secret_name = \"tutorial-sample\",\n    project_id = your_project_id,\n    secret_path = \"/\",\n    environment_slug = \"dev\",\n    secret_value = open(\"replace_with_path/secret.json\").read(),\n    secret_comment = \"Optional comment\",\n    skip_multiline_encoding = False,\n    secret_reminder_repeat_days = 30,     # Optional\n    secret_reminder_note = \"Remember to update this secret\"     # Optional\n)\nNow if you want to access the secret you just created in an application, you can use:\n# Get the secret\nsecret = client.secrets.get_secret_by_name(\n    secret_name = \"tutorial-sample\",\n    project_id = your_project_id,\n    environment_slug = \"dev\",\n    secret_path = \"/\",\n    expand_secret_references = True,\n    include_imports = True,\n    version = None  # Optional\n)\n\nsecret_value = json.loads(secret.secret.secret_value)     # Convert from string to json\nFor further questions on Infisical’s SDK, read their documentation.\n\n\n\nWrapping Up\nWith the secret now safely stored in Google Cloud or Infisical, you should delete the secret.json file I had you make earlier so they don’t get exposed from your directory by accident.\nWith your new knowledge unlocked, not only do you now have a single space to keep all your credentials for APIs, databases, etc. but you can access them from your programs. This is excellent cyber security in action and keeps your sensitive data secure. There are a lot of secret managers out there with their own unique features and advantages, so don’t be afraid to explore new products.\nThank you for reading my article and good luck in all your programming ventures!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "how-to-pipeline",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nDec 11, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\nUse a Secret Manager!\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nNov 20, 2024\n\n\nSpencer Callister\n\n\n\n\n\n\nNo matching items"
  }
]